//CAN bus emission function
#include "f2407.h"

union{
	float fvar;
	unsigned int intvar[2];
}conv;

extern int node;
extern unsigned int canr_flag;
extern unsigned int cans_flag;
extern unsigned int state;
extern unsigned int ua,ub,uc,ia,ib,ic;
extern unsigned int alpha_a,alpha_b,alpha_c;
extern unsigned int tcr_a,tcr_b,tcr_c;
extern unsigned int up_a,up_b,up_c;
extern unsigned int down_a,down_b,down_c;
extern unsigned int offset_a,offset_b,offset_c;
extern unsigned int ref_value;
extern float scale;
extern float kp_a,kp_b,kp_c;
extern float ki_a,ki_b,ki_c;
extern float kd_a,kd_b,kd_c;
extern float cond_a,cond_b,cond_c;

extern unsigned int canr[5];
extern unsigned int cans[5];

extern unsigned long gps_time;
extern unsigned long rel_time;
extern unsigned long can_id;


extern void clean_IFR(void);
extern void disable_WD(void);



/*can receiver use mailbox0*/
long can_isr(unsigned int *canr){

	long id = 0;

	canr[0] = CANMBX0A;
	canr[1] = CANMBX0B;
	canr[2] = CANMBX0C;
	canr[3] = CANMBX0D;
	
	id = CANMSGID0H&0x1FFF;
	id = id << 16;
	id |= CANMSGID0L;
	
	if(0x1000 & CANRCR)//is remote frame
		canr[4] = 1;
	else//is data frame
		canr[4] = 0;
	CANRCR=0x0010;//clear message receive hung bit of mailbox0

	clean_IFR();
//	int_enable();

	return id;	
}

/*can emmiter use mailbox4*/
void can_send(unsigned int *cans,unsigned long can_id){

	unsigned int delay = 10;
	
	disable_WD();
	
	CANMDER=0x00;
	
	CANMBX4A = ((cans[0] & 0x0ff00) >> 8) + ((cans[0] & 0x0ff) << 8);
	CANMBX4B = ((cans[1] & 0x0ff00) >> 8) + ((cans[1] & 0x0ff) << 8);	
	CANMBX4C = ((cans[2] & 0x0ff00) >> 8) + ((cans[2] & 0x0ff) << 8);	
	CANMBX4D = ((cans[3] & 0x0ff00) >> 8) + ((cans[3] & 0x0ff) << 8);	
	
	CANMSGID4H = 0xC000;
	CANMSGID4H |= (can_id >> 16 & 0x1FFF);
	CANMSGID4L = can_id & 0x0FFFF;

	CANMDER=0x11;

	CANTCR=0x40;//emmiter 4# mailbox request

	while((0 == (CANTCR & 0x04000)) && (0 != delay--));//waitting for 4# mailbox emmiter finish

	CANTCR=0x4000;//clear TA4
	
}

/*CAN modulor initializtion*/
void CAN_Init(void){

	CANMDER=0x00;//inhibit all mailbox
	CANIFR=0xFFFF;//
	CANLAM0H=0x9FFF;//set mask register for mailbox0&1
	CANLAM0L=0xFFFF;
	
	CANMCR=0x1000;//write BCR request
	while((CANGSR&0x10)==0);//waiting for BCR write enable
	CANBCR2=0x4;//BRP:4
	CANBCR1=0x11;//TSEG2:1 TSEG1:2 SAM:0 SJW:0 SBG:0
	CANMCR=CANMCR&0xEFFF;//end of BCR write operation
	while(CANGSR&0x10);//waiting for BCR write disable
	CANMDER=0x00;//inhibit all mailbox
	CANMCR=0x0100;//DSP request data operation
	CANMSGID0H=0xDFFF;//IDE=1:2.0B AME=1:use mask code AAM=0:inhibit acknowledge remove frame
	CANMSGID0L=0xFFFF;//ID=0x1FFF FFFF
	CANMSGCTRL0=0x8;//data length is 8
	CANMBX0A=0;//clear data of mailbox0
	CANMBX0B=0;
	CANMBX0C=0;
	CANMBX0D=0;
	CANMSGID4H=0xDFFF;
	CANMSGID4L=0xFFFF;
	CANMSGCTRL4=0x08;
	CANMBX4A=0;
	CANMBX4B=0;
	CANMBX4C=0;
	CANMBX4D=0;
	CANMCR=0x0480;//DBO=1:data sequence 0~7 ABO=1:resume BUS aotu
	CANMDER=0x11;//mailbox 0 is receiver,mailbox 4 is emmiter
	CANIMR=0xE1FF;//mailbox 4&0 interrupt enable
	CANIFR=0xFFFF;
}

/*clear CAN receive interrupt falg*/
void clear_rcan(void){

	unsigned int temp;
	
	temp = CANIFR;
	CANIFR =temp;
}






/*history event server*/
//all history events send out one by one each fixed time
void can_server(void){

	can_id = can_isr(canr);
	if(0 == canr[4]){//data frame
		switch(can_id & 0xFFFF0000){
			case 0x120000://GPS time data
			
				gps_time = canr[0];
				gps_time = gps_time << 8;
				gps_time = gps_time | canr[1];
				gps_time = gps_time << 8;
				gps_time = gps_time | canr[2];
				gps_time = gps_time << 8;
				gps_time = gps_time | canr[3];
				
				break;
				
				default: break;
		}//switch end
	}
	else if(node == (can_id & 0x0F)){//remote frame
		switch(0xFFFFFF00 & can_id){
			case 0x220100://vcp state answer
				cans[0] = 0x01;
				cans[1] = state;
				cans[2] = 0;
				cans[3] = 0;
				break;
			case 0x221000://phase a value
				conv.fvar = cond_a;
				cans[0] = ua;
				cans[1] = ia;
				cans[2] = conv.intvar[0];
				cans[3] = conv.intvar[1];
				break;
			case 0x221100://phase b value
				conv.fvar = cond_b;
				cans[0] = ub;
				cans[1] = ib;
				cans[2] = conv.intvar[0];
				cans[3] = conv.intvar[1];
				break;
			case 0x221200://phase c value
				conv.fvar = cond_c;
				cans[0] = uc;
				cans[1] = ic;
				cans[2] = conv.intvar[0];
				cans[3] = conv.intvar[1];
				break;
			case 0x221300://a tcr value
				cans[0] = alpha_a;
				cans[1] = tcr_a;
				cans[2] = up_a;
				cans[3] = down_a;
				break;
			case 0x221400://b tcr value
				cans[0] = alpha_b;
				cans[1] = tcr_b;
				cans[2] = up_b;
				cans[3] = down_b;
				break;
			case 0x221500://c tcr value
				cans[0] = alpha_c;
				cans[1] = tcr_c;
				cans[2] = up_c;
				cans[3] = down_c;
				break;
			case 0x221600://offset value
				cans[0] = offset_a;
				cans[1] = offset_b;
				cans[2] = offset_c;
				cans[3] = 0;
				break;
			case 0x221700://kp of A
				conv.fvar = kp_a;
				cans[0] = conv.intvar[0];
				cans[1] = conv.intvar[1];
				cans[2] = 0;
				cans[3] = 0;
				break;
			case 0x221800://kp of B
				conv.fvar = kp_b;
				cans[0] = conv.intvar[0];
				cans[1] = conv.intvar[1];
				cans[2] = 0;
				cans[3] = 0;
				break;
			case 0x221900://kp of C
				conv.fvar = kp_c;
				cans[0] = conv.intvar[0];
				cans[1] = conv.intvar[1];
				cans[2] = 0;
				cans[3] = 0;
				break;	
			case 0x221A00://ki of A
				conv.fvar = ki_a;
				cans[0] = conv.intvar[0];
				cans[1] = conv.intvar[1];
				cans[2] = 0;
				cans[3] = 0;
				break;
			case 0x221B00://ki of B
				conv.fvar = ki_b;
				cans[0] = conv.intvar[0];
				cans[1] = conv.intvar[1];
				cans[2] = 0;
				cans[3] = 0;
				break;
			case 0x221C00://ki of C
				conv.fvar = ki_c;
				cans[0] = conv.intvar[0];
				cans[1] = conv.intvar[1];
				cans[2] = 0;
				cans[3] = 0;
				break;				
			case 0x221D00://kd of A
				conv.fvar = kd_a;
				cans[0] = conv.intvar[0];
				cans[1] = conv.intvar[1];
				cans[2] = 0;
				cans[3] = 0;
				break;
			case 0x221E00://kd of B
				conv.fvar = kd_b;
				cans[0] = conv.intvar[0];
				cans[1] = conv.intvar[1];
				cans[2] = 0;
				cans[3] = 0;
				break;
			case 0x221F00://kd of C
				conv.fvar = kd_c;
				cans[0] = conv.intvar[0];
				cans[1] = conv.intvar[1];
				cans[2] = 0;
				cans[3] = 0;
				break;
			case 0x222000://scale value
				conv.fvar = scale;
				cans[0] = conv.intvar[0];
				cans[1] = conv.intvar[1];
				cans[2] = 0;
				cans[3] = 0;
				break;
			case 0x222100://
				cans[0] = node;
				cans[1] = ref_value;
				cans[2] = 0;
				cans[3] = 0;
				break;
			default: break;
		}
		cans_flag = 1;
		can_send(cans,can_id);
	}
}

//end file

